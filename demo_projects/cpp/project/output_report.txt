--- START FILE TREE ---
Exported File Structure:
.
├── .clang-format
├── CMakeLists.txt
├── src
│   ├── calculator.cpp
│   └── calculator.h
└── tests
    ├── CMakeLists.txt
    └── main_test.cpp
--- END FILE TREE ---

--- START FILE: .clang-format ---
BasedOnStyle: Google
IndentWidth: 4
ColumnLimit: 100
BreakBeforeBraces: Attach
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: true
IndentCaseLabels: true
UseTab: Never
SortIncludes: false
SpaceAfterCStyleCast: true

--- END FILE: .clang-format ---

--- START FILE: CMakeLists.txt ---
# project/CMakeLists.txt
cmake_minimum_required(VERSION 3.14)
project(GcovExample LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

enable_testing()

# ---------------------------------------------------------------------------
# Coverage flags (GCC / Clang)
# ---------------------------------------------------------------------------
set(COVERAGE_FLAGS -O0 -g --coverage)     
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(${COVERAGE_FLAGS}) 
    add_link_options(--coverage)
endif()

# ---------------------------------------------------------------------------
# GoogleTest
# ---------------------------------------------------------------------------
include(FetchContent)
FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/refs/tags/v1.14.0.zip
)
FetchContent_MakeAvailable(googletest)

# ---------------------------------------------------------------------------
# Library under test
# ---------------------------------------------------------------------------
add_library(app_lib STATIC src/calculator.cpp)
target_include_directories(app_lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)

# ---------------------------------------------------------------------------
# Unit‑test executable
# ---------------------------------------------------------------------------
add_executable(run_tests tests/main_test.cpp)

# Use the gtest main that comes with GoogleTest – no custom main() needed
target_link_libraries(run_tests PRIVATE app_lib GTest::gtest_main)

include(GoogleTest)
gtest_discover_tests(run_tests)

--- END FILE: CMakeLists.txt ---

--- START FILE: src/calculator.cpp ---
#include "calculator.h"

int Calculator::add(int a, int b) {
    return a + b;
}

int Calculator::subtract(int a, int b) {
    return a - b;
}

int Calculator::multiply(int a, int b) {
    // This function is not called by any test.
    return a * b;
}

double Calculator::divide(double a, double b) {
    if (b == 0.0) {
        throw std::invalid_argument("Division by zero is not allowed.");
    }
    return a / b;
}

int Calculator::sign(int x) {
    if (x > 0) {
        return 1;
    } else if (x < 0) {
        return -1;
    } else {
        // This branch will be deliberately missed by the tests.
        return 0;
    }
}
--- END FILE: src/calculator.cpp ---

--- START FILE: src/calculator.h ---
#ifndef CALCULATOR_H
#define CALCULATOR_H

#include <vector>
#include <numeric>
#include <stdexcept>

// A simple calculator class to demonstrate testing.
class Calculator {
   public:
    int add(int a, int b);
    int subtract(int a, int b);
    int multiply(int a, int b);  // This function will be intentionally untested.
    double divide(double a, double b);

    // A function with multiple branches to check coverage.
    int sign(int x);

    // A modern C++ template function.
    template <typename T>
    T sum(const std::vector<T>& numbers) {
        if (numbers.empty()) {
            return T{};  // Test the empty case.
        }
        // Use std::accumulate from <numeric>.
        return std::accumulate(numbers.begin(), numbers.end(), T{});
    }
};

#endif  // CALCULATOR_H
--- END FILE: src/calculator.h ---

--- START FILE: tests/CMakeLists.txt ---
# Define the executable for our tests.
add_executable(run_tests main_test.cpp)

# Link our test executable against our library (app_lib) and Google Test.
# We use GTest::gtest because we provide our own main() function in main_test.cpp.
# This modern target automatically handles linking AND include directories.
target_link_libraries(run_tests PRIVATE app_lib GTest::gtest)

# Add the test to CTest's list of tests.
# This allows running tests with the 'ctest' command.
include(GoogleTest)
gtest_discover_tests(run_tests)
--- END FILE: tests/CMakeLists.txt ---

--- START FILE: tests/main_test.cpp ---
#include "gtest/gtest.h"
#include "calculator.h"  // Include the header for the class we are testing.

// A test fixture can be used to share setup code between tests.
class CalculatorTest : public ::testing::Test {
   protected:
    Calculator calc;
};

TEST_F(CalculatorTest, HandlesAddition) {
    ASSERT_EQ(calc.add(2, 3), 5);
    ASSERT_EQ(calc.add(-1, 1), 0);
}

TEST_F(CalculatorTest, HandlesSubtraction) {
    ASSERT_EQ(calc.subtract(5, 2), 3);
}

TEST_F(CalculatorTest, HandlesDivision) {
    ASSERT_DOUBLE_EQ(calc.divide(10.0, 4.0), 2.5);
    // Test for exception when dividing by zero.
    ASSERT_THROW(calc.divide(1.0, 0.0), std::invalid_argument);
}

TEST_F(CalculatorTest, HandlesSignFunction) {
    // We test the positive and negative cases...
    ASSERT_EQ(calc.sign(100), 1);
    ASSERT_EQ(calc.sign(-50), -1);
    // ... but we forget to test the zero case.
}

TEST_F(CalculatorTest, HandlesTemplateSum) {
    ASSERT_EQ(calc.sum(std::vector<int>{1, 2, 3}), 6);
    ASSERT_DOUBLE_EQ(calc.sum(std::vector<double>{1.5, 2.5, 3.0}), 7.0);
    // Test the empty vector case.
    ASSERT_EQ(calc.sum(std::vector<int>{}), 0);
}

// The main function for Google Test
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
--- END FILE: tests/main_test.cpp ---

